---
# Set up certificates on the machine using CertBot
- name: Install CertBot dependencies
  apt:
    pkg: software-properties-common
    state: present

- name: Add CertBot repository
  apt_repository:
    repo: "ppa:certbot/certbot"
    state: present
    validate_certs: false
  environment:
    http_proxy: http://172.20.1.1:8888/

- name: Install CertBot
  apt:
    pkg: certbot
    state: latest

- name: Stop nginx
  service:
    name: nginx
    state: stopped

# The nginx role will assume that this cert exists when configuring.
- name: Use CertBot to obtain certificate
  command: certbot certonly --standalone -n --agree-tos --email {{ driver_admin_email }} --domains {{ allowed_host }}
  args:
    creates: "{{ letsencrypt_cert_root }}/fullchain.pem"

# The existence of these files is assumed by the nginx role as well.
# This isn't a great option, but it roughly approximates what the certbot-nginx code does:
# these files are included directly in the python package and copied into place.
# certbot-nginx got really confused by our nginx config, so this seemed like the easier route
- name: Download CertBot nginx SSL config
  get_url:
    url: "{{ letsencrypt_options_ssl_nginx_url }}"
    dest: "{{ letsencrypt_options_ssl_nginx_path }}"
    validate_certs: false

- name: Download CertBot Diffie-Hellman Params
  get_url:
    url: "{{ letsencrypt_dhparams_url }}"
    dest: "{{ letsencrypt_dhparams_path }}"
    validate_certs: false

- name: Start nginx
  service:
    name: nginx
    state: started

# Copied from old azavea.letsencrypt role
- name: Install cronjob for cert renewal
  cron:
    job: "certbot renew --pre-hook 'service nginx stop' --post-hook 'service nginx start'"
    day: "1,11,21"
    hour: 4
    minute: 30
    state: present
    name: "letsencrypt certificate renewal"
